#!/usr/bin/env python

import argparse, subprocess, sys, os
from buildconf import *

ROOT_DIR = os.path.abspath(os.path.dirname(__file__))

def exec_cmd(cmd, workdir):
	try:
		shcmd = "cd %s && %s" % (workdir, cmd)
		print shcmd
		retcode = subprocess.call(shcmd, shell=True)
		if retcode < 0:
			print >>sys.stderr, "Child was terminated by signal", -retcode
			return False
		elif retcode != 0:
			print >>sys.stderr, "Child failed with exitcode", retcode
			return False
	except OSError, e:
		print >>sys.stderr, "Execution failed:", e
		return False

	return True

def build(args):
	for module in MODULES:
		if not build_module(module, args):
			return False
	return True

def build_module(module, args):
	# Build dependencies recursively
	dependencies = DEPENDENCIES[module].split(',') if DEPENDENCIES[module] else None
	if dependencies:
		for dependency in dependencies:
			build_module(dependency, args)

	import shutil

	print "===> Building %s ..." % module

	cookiename=".hawaii-ci-cookie"
	cmakeargs=[]

	if args.build_type:
		cmakeargs.append("-DCMAKE_BUILD_TYPE=" + args.build_type)
	if args.prefix:
		cmakeargs.append("-DCMAKE_INSTALL_PREFIX=" + args.prefix)
	if args.bindir:
		cmakeargs.append("-DCMAKE_INSTALL_BINDIR=" + args.bindir)
	if args.libdir:
		cmakeargs.append("-DCMAKE_INSTALL_LIBDIR=" + args.libdir)
	if args.datadir:
		cmakeargs.append("-DCMAKE_INSTALL_DATADIR=" + args.datadir)
	if args.pluginsdir:
		cmakeargs.append("-DCMAKE_INSTALL_PLUGINSDIR=" + args.pluginsdir)
	if args.importsdir:
		cmakeargs.append("-DCMAKE_INSTALL_IMPORTSDIR=" + args.importsdir)

	workdir = os.path.join(ROOT_DIR, module, "build")
	origworkdir = os.getcwd()
	retval = True

	# Create the build directory if it's either not found or we're in rebuild mode
	if not os.path.exists(os.path.join(workdir, cookiename)) or args.rebuild:
		if os.path.exists(workdir):
			shutil.rmtree(workdir)
		os.mkdir(workdir)

	if args.verbose: print "Running cmake..."
	if not exec_cmd("cmake %s .." % " ".join(cmakeargs), workdir):
		retval = False

	if retval:
		if args.verbose: print "Running make..."
		if not exec_cmd("make", workdir):
			retval = False

	if retval:
		if args.verbose: print "Running sudo make install..."
		if not exec_cmd("sudo make install", workdir):
			retval = False

	if retval:
		if args.verbose: print "Saving the cookie..."
		if not exec_cmd("date > %s" % cookiename, workdir):
			retval = False

	os.chdir(origworkdir)
	return retval

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--verbose", action="store_true",
		help="verbose messages")
	parser.add_argument("--rebuild", action="store_true",
		help="rebuild already built modules")
	parser.add_argument("--build-type", metavar="TYPE", type=str, nargs='?',
		help="build type (possible values are Release, Debug and RelWithDebInfo)",
		default="RelWithDebInfo")
	parser.add_argument("--prefix", metavar="PATH", type=str, nargs='?',
		help="installation prefix", default="/system")
	parser.add_argument("--bindir", metavar="PATH", type=str, nargs='?',
		help="binaries directory")
	parser.add_argument("--libdir", metavar="PATH", type=str, nargs='?',
		help="libraries directory")
	parser.add_argument("--datadir", metavar="PATH", type=str, nargs='?',
		help="data directory")
	parser.add_argument("--pluginsdir", metavar="PATH", type=str, nargs='?',
		help="plugins directory")
	parser.add_argument("--importsdir", metavar="PATH", type=str, nargs='?',
		help="imports directory")

	args = parser.parse_args()
	build(args)

# vim:set ts=4 sw=4 et:
