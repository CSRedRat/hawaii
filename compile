#!/usr/bin/env python
# vim:set ts=4 sw=4 et:

import argparse, subprocess, sys, os

from buildconf import *

def build(args):
	for module in MODULES:
		for dependency in DEPENDENCIES[module].split(','):
			if not dependency:
				continue
			if not build_module(dependency, args):
				return False
		if not build_module(module, args):
			return False
	return True

def build_module(module, args):
	import shutil

	print "===> Building %s ..." % module

	cookiename=".hawaii-ci-cookie"
	cmakeargs=[]

	if args.build_type:
		cmakeargs.append("-DCMAKE_BUILD_TYPE=" + args.build_type)
	if args.prefix:
		cmakeargs.append("-DCMAKE_INSTALL_PREFIX=" + args.prefix)
	if args.bindir:
		cmakeargs.append("-DCMAKE_INSTALL_BINDIR=" + args.bindir)
	if args.libdir:
		cmakeargs.append("-DCMAKE_INSTALL_LIBDIR=" + args.libdir)
	if args.datadir:
		cmakeargs.append("-DCMAKE_INSTALL_DATADIR=" + args.datadir)
	if args.pluginsdir:
		cmakeargs.append("-DCMAKE_INSTALL_PLUGINSDIR=" + args.pluginsdir)
	if args.importsdir:
		cmakeargs.append("-DCMAKE_INSTALL_IMPORTSDIR=" + args.importsdir)

	os.chdir(module)

	# Skip already built modules
	if os.path.exists("./build/%s" % cookiename):
		return True

	if os.path.exists("./build"):
		shutil.rmtree("build")
	os.mkdir("build")
	os.chdir("build")
	try:
		retcode = subprocess.call("cmake %s .." % " ".join(cmakeargs), shell=True)
		if retcode < 0:
			print >>sys.stderr, "Child was terminated by signal", -retcode
		else:
			print >>sys.stderr, "Child returned", retcode
		return False
	except OSError, e:
		print >>sys.stderr, "Execution failed:", e
		return False

	os.system("touch %s" % cookiename)

	os.chdir("../..")
	return True

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--build-type", metavar="TYPE", type=str, nargs='?',
		help="build type (possible values are Release, Debug and RelWithDebInfo)",
		default="RelWithDebInfo")
	parser.add_argument("--prefix", metavar="PATH", type=str, nargs='?',
		help="installation prefix")
	parser.add_argument("--bindir", metavar="PATH", type=str, nargs='?',
		help="binaries directory")
	parser.add_argument("--libdir", metavar="PATH", type=str, nargs='?',
		help="libraries directory")
	parser.add_argument("--datadir", metavar="PATH", type=str, nargs='?',
		help="data directory")
	parser.add_argument("--pluginsdir", metavar="PATH", type=str, nargs='?',
		help="plugins directory")
	parser.add_argument("--importsdir", metavar="PATH", type=str, nargs='?',
		help="imports directory")

	args = parser.parse_args()
	build(args)

# vim:set ts=4 sw=4 et:
